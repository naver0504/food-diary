/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables;


import com.fooddiary.api.jooq.Keys;
import com.fooddiary.api.jooq.MyFoodDiarybook;
import com.fooddiary.api.jooq.tables.records.PhotoRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Photo extends TableImpl<PhotoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>my_food_diarybook.photo</code>
     */
    public static final Photo PHOTO = new Photo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PhotoRecord> getRecordType() {
        return PhotoRecord.class;
    }

    /**
     * The column <code>my_food_diarybook.photo.id</code>.
     */
    public final TableField<PhotoRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>my_food_diarybook.photo.real_name</code>.
     */
    public final TableField<PhotoRecord, String> REAL_NAME = createField(DSL.name("real_name"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>my_food_diarybook.photo.s3_key</code>.
     */
    public final TableField<PhotoRecord, String> S3_KEY = createField(DSL.name("s3_key"), SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>my_food_diarybook.photo.create_at</code>.
     */
    public final TableField<PhotoRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>my_food_diarybook.photo.diarybook_id</code>.
     */
    public final TableField<PhotoRecord, Long> DIARYBOOK_ID = createField(DSL.name("diarybook_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Photo(Name alias, Table<PhotoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Photo(Name alias, Table<PhotoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>my_food_diarybook.photo</code> table reference
     */
    public Photo(String alias) {
        this(DSL.name(alias), PHOTO);
    }

    /**
     * Create an aliased <code>my_food_diarybook.photo</code> table reference
     */
    public Photo(Name alias) {
        this(alias, PHOTO);
    }

    /**
     * Create a <code>my_food_diarybook.photo</code> table reference
     */
    public Photo() {
        this(DSL.name("photo"), null);
    }

    public <O extends Record> Photo(Table<O> child, ForeignKey<O, PhotoRecord> key) {
        super(child, key, PHOTO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MyFoodDiarybook.MY_FOOD_DIARYBOOK;
    }

    @Override
    public Identity<PhotoRecord, Long> getIdentity() {
        return (Identity<PhotoRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PhotoRecord> getPrimaryKey() {
        return Keys.KEY_PHOTO_PRIMARY;
    }

    @Override
    public Photo as(String alias) {
        return new Photo(DSL.name(alias), this);
    }

    @Override
    public Photo as(Name alias) {
        return new Photo(alias, this);
    }

    @Override
    public Photo as(Table<?> alias) {
        return new Photo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Photo rename(String name) {
        return new Photo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photo rename(Name name) {
        return new Photo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Photo rename(Table<?> name) {
        return new Photo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, LocalDateTime, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super LocalDateTime, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
