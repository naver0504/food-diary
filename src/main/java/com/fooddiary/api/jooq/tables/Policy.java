/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables;


import com.fooddiary.api.jooq.Keys;
import com.fooddiary.api.jooq.MyFoodDiarybook;
import com.fooddiary.api.jooq.tables.records.PolicyRecord;

import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 정책테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Policy extends TableImpl<PolicyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>my_food_diarybook.policy</code>
     */
    public static final Policy POLICY = new Policy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyRecord> getRecordType() {
        return PolicyRecord.class;
    }

    /**
     * The column <code>my_food_diarybook.policy.id</code>.
     */
    public final TableField<PolicyRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>my_food_diarybook.policy.key</code>.
     */
    public final TableField<PolicyRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>my_food_diarybook.policy.value</code>.
     */
    public final TableField<PolicyRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>my_food_diarybook.policy.create_at</code>.
     */
    public final TableField<PolicyRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>my_food_diarybook.policy.update_at</code>.
     */
    public final TableField<PolicyRecord, LocalDateTime> UPDATE_AT = createField(DSL.name("update_at"), SQLDataType.LOCALDATETIME(0), this, "");

    private Policy(Name alias, Table<PolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Policy(Name alias, Table<PolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("정책테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>my_food_diarybook.policy</code> table reference
     */
    public Policy(String alias) {
        this(DSL.name(alias), POLICY);
    }

    /**
     * Create an aliased <code>my_food_diarybook.policy</code> table reference
     */
    public Policy(Name alias) {
        this(alias, POLICY);
    }

    /**
     * Create a <code>my_food_diarybook.policy</code> table reference
     */
    public Policy() {
        this(DSL.name("policy"), null);
    }

    public <O extends Record> Policy(Table<O> child, ForeignKey<O, PolicyRecord> key) {
        super(child, key, POLICY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MyFoodDiarybook.MY_FOOD_DIARYBOOK;
    }

    @Override
    public Identity<PolicyRecord, Integer> getIdentity() {
        return (Identity<PolicyRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<PolicyRecord> getPrimaryKey() {
        return Keys.KEY_POLICY_PRIMARY;
    }

    @Override
    public Policy as(String alias) {
        return new Policy(DSL.name(alias), this);
    }

    @Override
    public Policy as(Name alias) {
        return new Policy(alias, this);
    }

    @Override
    public Policy as(Table<?> alias) {
        return new Policy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(String name) {
        return new Policy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Name name) {
        return new Policy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Table<?> name) {
        return new Policy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
