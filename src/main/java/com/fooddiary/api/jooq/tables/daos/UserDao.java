/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables.daos;


import com.fooddiary.api.jooq.enums.UserCreatePath;
import com.fooddiary.api.jooq.tables.User;
import com.fooddiary.api.jooq.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDao extends DAOImpl<UserRecord, com.fooddiary.api.jooq.tables.pojos.User, Integer> {

    /**
     * Create a new UserDao without any configuration
     */
    public UserDao() {
        super(User.USER, com.fooddiary.api.jooq.tables.pojos.User.class);
    }

    /**
     * Create a new UserDao with an attached configuration
     */
    public UserDao(Configuration configuration) {
        super(User.USER, com.fooddiary.api.jooq.tables.pojos.User.class, configuration);
    }

    @Override
    public Integer getId(com.fooddiary.api.jooq.tables.pojos.User object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(User.USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchById(Integer... values) {
        return fetch(User.USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.fooddiary.api.jooq.tables.pojos.User fetchOneById(Integer value) {
        return fetchOne(User.USER.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.fooddiary.api.jooq.tables.pojos.User> fetchOptionalById(Integer value) {
        return fetchOptional(User.USER.ID, value);
    }

    /**
     * Fetch records that have <code>pw BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfPw(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.PW, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>pw IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByPw(String... values) {
        return fetch(User.USER.PW, values);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByName(String... values) {
        return fetch(User.USER.NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(User.USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByEmail(String... values) {
        return fetch(User.USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>create_path BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfCreatePath(UserCreatePath lowerInclusive, UserCreatePath upperInclusive) {
        return fetchRange(User.USER.CREATE_PATH, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_path IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByCreatePath(UserCreatePath... values) {
        return fetch(User.USER.CREATE_PATH, values);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByCreateAt(LocalDateTime... values) {
        return fetch(User.USER.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>update_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchRangeOfUpdateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(User.USER.UPDATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>update_at IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.User> fetchByUpdateAt(LocalDateTime... values) {
        return fetch(User.USER.UPDATE_AT, values);
    }
}
