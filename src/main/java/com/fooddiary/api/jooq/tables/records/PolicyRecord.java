/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables.records;


import com.fooddiary.api.jooq.tables.Policy;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * 정책테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyRecord extends UpdatableRecordImpl<PolicyRecord> implements Record5<Integer, String, String, LocalDateTime, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>my_food_diarybook.policy.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>my_food_diarybook.policy.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>my_food_diarybook.policy.key</code>.
     */
    public void setKey(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>my_food_diarybook.policy.key</code>.
     */
    public String getKey() {
        return (String) get(1);
    }

    /**
     * Setter for <code>my_food_diarybook.policy.value</code>.
     */
    public void setValue(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>my_food_diarybook.policy.value</code>.
     */
    public String getValue() {
        return (String) get(2);
    }

    /**
     * Setter for <code>my_food_diarybook.policy.create_at</code>.
     */
    public void setCreateAt(LocalDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>my_food_diarybook.policy.create_at</code>.
     */
    public LocalDateTime getCreateAt() {
        return (LocalDateTime) get(3);
    }

    /**
     * Setter for <code>my_food_diarybook.policy.update_at</code>.
     */
    public void setUpdateAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>my_food_diarybook.policy.update_at</code>.
     */
    public LocalDateTime getUpdateAt() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Integer, String, String, LocalDateTime, LocalDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Policy.POLICY.ID;
    }

    @Override
    public Field<String> field2() {
        return Policy.POLICY.KEY;
    }

    @Override
    public Field<String> field3() {
        return Policy.POLICY.VALUE;
    }

    @Override
    public Field<LocalDateTime> field4() {
        return Policy.POLICY.CREATE_AT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Policy.POLICY.UPDATE_AT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getKey();
    }

    @Override
    public String component3() {
        return getValue();
    }

    @Override
    public LocalDateTime component4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime component5() {
        return getUpdateAt();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getKey();
    }

    @Override
    public String value3() {
        return getValue();
    }

    @Override
    public LocalDateTime value4() {
        return getCreateAt();
    }

    @Override
    public LocalDateTime value5() {
        return getUpdateAt();
    }

    @Override
    public PolicyRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public PolicyRecord value2(String value) {
        setKey(value);
        return this;
    }

    @Override
    public PolicyRecord value3(String value) {
        setValue(value);
        return this;
    }

    @Override
    public PolicyRecord value4(LocalDateTime value) {
        setCreateAt(value);
        return this;
    }

    @Override
    public PolicyRecord value5(LocalDateTime value) {
        setUpdateAt(value);
        return this;
    }

    @Override
    public PolicyRecord values(Integer value1, String value2, String value3, LocalDateTime value4, LocalDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PolicyRecord
     */
    public PolicyRecord() {
        super(Policy.POLICY);
    }

    /**
     * Create a detached, initialised PolicyRecord
     */
    public PolicyRecord(Integer id, String key, String value, LocalDateTime createAt, LocalDateTime updateAt) {
        super(Policy.POLICY);

        setId(id);
        setKey(key);
        setValue(value);
        setCreateAt(createAt);
        setUpdateAt(updateAt);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised PolicyRecord
     */
    public PolicyRecord(com.fooddiary.api.jooq.tables.pojos.Policy value) {
        super(Policy.POLICY);

        if (value != null) {
            setId(value.getId());
            setKey(value.getKey());
            setValue(value.getValue());
            setCreateAt(value.getCreateAt());
            setUpdateAt(value.getUpdateAt());
            resetChangedOnNotNull();
        }
    }
}
