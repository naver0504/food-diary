/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables;


import com.fooddiary.api.jooq.Keys;
import com.fooddiary.api.jooq.MyFoodDiarybook;
import com.fooddiary.api.jooq.enums.DiarybookMealType;
import com.fooddiary.api.jooq.tables.records.DiarybookRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diarybook extends TableImpl<DiarybookRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>my_food_diarybook.diarybook</code>
     */
    public static final Diarybook DIARYBOOK = new Diarybook();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiarybookRecord> getRecordType() {
        return DiarybookRecord.class;
    }

    /**
     * The column <code>my_food_diarybook.diarybook.id</code>.
     */
    public final TableField<DiarybookRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>my_food_diarybook.diarybook.date</code>.
     */
    public final TableField<DiarybookRecord, LocalDate> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>my_food_diarybook.diarybook.create_at</code>.
     */
    public final TableField<DiarybookRecord, LocalDateTime> CREATE_AT = createField(DSL.name("create_at"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>my_food_diarybook.diarybook.create_user_id</code>.
     */
    public final TableField<DiarybookRecord, Integer> CREATE_USER_ID = createField(DSL.name("create_user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>my_food_diarybook.diarybook.meal_type</code>.
     */
    public final TableField<DiarybookRecord, DiarybookMealType> MEAL_TYPE = createField(DSL.name("meal_type"), SQLDataType.VARCHAR(9).asEnumDataType(com.fooddiary.api.jooq.enums.DiarybookMealType.class), this, "");

    private Diarybook(Name alias, Table<DiarybookRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diarybook(Name alias, Table<DiarybookRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>my_food_diarybook.diarybook</code> table
     * reference
     */
    public Diarybook(String alias) {
        this(DSL.name(alias), DIARYBOOK);
    }

    /**
     * Create an aliased <code>my_food_diarybook.diarybook</code> table
     * reference
     */
    public Diarybook(Name alias) {
        this(alias, DIARYBOOK);
    }

    /**
     * Create a <code>my_food_diarybook.diarybook</code> table reference
     */
    public Diarybook() {
        this(DSL.name("diarybook"), null);
    }

    public <O extends Record> Diarybook(Table<O> child, ForeignKey<O, DiarybookRecord> key) {
        super(child, key, DIARYBOOK);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : MyFoodDiarybook.MY_FOOD_DIARYBOOK;
    }

    @Override
    public Identity<DiarybookRecord, Long> getIdentity() {
        return (Identity<DiarybookRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<DiarybookRecord> getPrimaryKey() {
        return Keys.KEY_DIARYBOOK_PRIMARY;
    }

    @Override
    public Diarybook as(String alias) {
        return new Diarybook(DSL.name(alias), this);
    }

    @Override
    public Diarybook as(Name alias) {
        return new Diarybook(alias, this);
    }

    @Override
    public Diarybook as(Table<?> alias) {
        return new Diarybook(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diarybook rename(String name) {
        return new Diarybook(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diarybook rename(Name name) {
        return new Diarybook(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diarybook rename(Table<?> name) {
        return new Diarybook(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, LocalDate, LocalDateTime, Integer, DiarybookMealType> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super LocalDate, ? super LocalDateTime, ? super Integer, ? super DiarybookMealType, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super LocalDate, ? super LocalDateTime, ? super Integer, ? super DiarybookMealType, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
