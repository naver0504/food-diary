/*
 * This file is generated by jOOQ.
 */
package com.fooddiary.api.jooq.tables.daos;


import com.fooddiary.api.jooq.tables.Session;
import com.fooddiary.api.jooq.tables.records.SessionRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SessionDao extends DAOImpl<SessionRecord, com.fooddiary.api.jooq.tables.pojos.Session, String> {

    /**
     * Create a new SessionDao without any configuration
     */
    public SessionDao() {
        super(Session.SESSION, com.fooddiary.api.jooq.tables.pojos.Session.class);
    }

    /**
     * Create a new SessionDao with an attached configuration
     */
    public SessionDao(Configuration configuration) {
        super(Session.SESSION, com.fooddiary.api.jooq.tables.pojos.Session.class, configuration);
    }

    @Override
    public String getId(com.fooddiary.api.jooq.tables.pojos.Session object) {
        return object.getToken();
    }

    /**
     * Fetch records that have <code>token BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchRangeOfToken(String lowerInclusive, String upperInclusive) {
        return fetchRange(Session.SESSION.TOKEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>token IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchByToken(String... values) {
        return fetch(Session.SESSION.TOKEN, values);
    }

    /**
     * Fetch a unique record that has <code>token = value</code>
     */
    public com.fooddiary.api.jooq.tables.pojos.Session fetchOneByToken(String value) {
        return fetchOne(Session.SESSION.TOKEN, value);
    }

    /**
     * Fetch a unique record that has <code>token = value</code>
     */
    public Optional<com.fooddiary.api.jooq.tables.pojos.Session> fetchOptionalByToken(String value) {
        return fetchOptional(Session.SESSION.TOKEN, value);
    }

    /**
     * Fetch records that have <code>create_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchRangeOfCreateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Session.SESSION.CREATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_at IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchByCreateAt(LocalDateTime... values) {
        return fetch(Session.SESSION.CREATE_AT, values);
    }

    /**
     * Fetch records that have <code>terminate_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchRangeOfTerminateAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Session.SESSION.TERMINATE_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>terminate_at IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchByTerminateAt(LocalDateTime... values) {
        return fetch(Session.SESSION.TERMINATE_AT, values);
    }

    /**
     * Fetch records that have <code>user_email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchRangeOfUserEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Session.SESSION.USER_EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_email IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchByUserEmail(String... values) {
        return fetch(Session.SESSION.USER_EMAIL, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Session.SESSION.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.fooddiary.api.jooq.tables.pojos.Session> fetchByUserId(Integer... values) {
        return fetch(Session.SESSION.USER_ID, values);
    }
}
